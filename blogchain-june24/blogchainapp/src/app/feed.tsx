"use client";

import React, { useEffect, useState } from "react";
import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ethers } from "ethers";
import { Button } from "@/components/ui/button";
// import { Icon } from "lucide-react";
// import star from "../../public/star.png";
// import { Icon } from '@rneui/themed';

interface Props {
  postId: number;
  address: string;
  handleClick: (postId: number, address: string) => Promise<void>;
}

const contractABI = {
  _format: "hh-sol-artifact-1",
  contractName: "MyValContract",
  sourceName: "contracts/Contract.sol",
  abi: [
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "address",
          name: "recipient",
          type: "address",
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "postId",
          type: "uint256",
        },
      ],
      name: "Addpost",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint256",
          name: "postId",
          type: "uint256",
        },
        {
          indexed: false,
          internalType: "bool",
          name: "isDeleted",
          type: "bool",
        },
      ],
      name: "Deletepost",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint256",
          name: "postId",
          type: "uint256",
        },
        {
          indexed: false,
          internalType: "address",
          name: "approver",
          type: "address",
        },
      ],
      name: "PostApproved",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint256",
          name: "postId",
          type: "uint256",
        },
        {
          indexed: false,
          internalType: "address",
          name: "liker",
          type: "address",
        },
      ],
      name: "PostLiked",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint256",
          name: "postId",
          type: "uint256",
        },
        {
          indexed: false,
          internalType: "bool",
          name: "isVerified",
          type: "bool",
        },
      ],
      name: "Validatepost",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "string",
          name: "postText",
          type: "string",
        },
        {
          internalType: "bool",
          name: "isDeleted",
          type: "bool",
        },
      ],
      name: "addpost",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      name: "approvals",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_postId",
          type: "uint256",
        },
      ],
      name: "expertapprove",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [],
      name: "getAllposts",
      outputs: [
        {
          components: [
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "username",
              type: "address",
            },
            {
              internalType: "string",
              name: "postText",
              type: "string",
            },
            {
              internalType: "bool",
              name: "isDeleted",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "isVerified",
              type: "bool",
            },
            {
              internalType: "uint256",
              name: "likes",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "approvals",
              type: "uint256",
            },
          ],
          internalType: "struct MyValContract.post[]",
          name: "",
          type: "tuple[]",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_postId",
          type: "uint256",
        },
      ],
      name: "likePost",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      name: "likes",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_postId",
          type: "uint256",
        },
      ],
      name: "validatepost",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
  ],
  bytecode:
    "0x608060405234801561001057600080fd5b50610c03806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637e9dffe61161005b5780637e9dffe6146100dd578063aee5c349146100fd578063bc7bf1c714610112578063d4ccd5f31461012557600080fd5b8063204ff2401461008257806363035f6614610097578063725009d3146100ca575b600080fd5b61009561009036600461083b565b610138565b005b6100b76100a536600461083b565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100956100d836600461083b565b61022d565b6100b76100eb36600461083b565b60026020526000908152604090205481565b610105610281565b6040516100c19190610854565b61009561012036600461083b565b61053c565b610095610133366004610985565b61064b565b600081815260036020526040812080549161015283610a47565b9091555050600081815260036020526040902054600a10156101f15760016000828154811061018357610183610a6e565b906000526020600020906006020160030160016101000a81548160ff0219169083151502179055507fb1c8a09f3f65c01ce2ad5471f151a4d0ca61d365bcd286c0f0041845538f2b098160016040516101e89291909182521515602082015260400190565b60405180910390a15b604080518281523360208201527fc6c773bb48fb8d38ada891d09df01af1f307f2a1bc38bb513c5cb1950150038191015b60405180910390a150565b600081815260026020526040812080549161024783610a47565b9091555050604080518281523360208201527fcf765d6f163c9b0d832e2a94f4c8e9bffd32a2c3ca5fdbb8cc67b5fe1441f4139101610222565b600080546060919067ffffffffffffffff8111156102a1576102a161095a565b6040519080825280602002602001820160405280156102da57816020015b6102c76107f1565b8152602001906001900390816102bf5790505b5090506000805b60005481101561048757600081815481106102fe576102fe610a6e565b6000918252602082206003600690920201015460ff1615159003610475576000818154811061032f5761032f610a6e565b90600052602060002090600602016040518060e0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201805461039190610a84565b80601f01602080910402602001604051908101604052809291908181526020018280546103bd90610a84565b801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b5050509183525050600382015460ff80821615156020840152610100909104161515604082015260048201546060820152600590910154608090910152835184908490811061045b5761045b610a6e565b6020026020010181905250818061047190610a47565b9250505b8061047f81610a47565b9150506102e1565b5060008167ffffffffffffffff8111156104a3576104a361095a565b6040519080825280602002602001820160405280156104dc57816020015b6104c96107f1565b8152602001906001900390816104c15790505b50905060005b82811015610534578381815181106104fc576104fc610a6e565b602002602001015182828151811061051657610516610a6e565b6020026020010181905250808061052c90610a47565b9150506104e2565b509392505050565b6000818154811061054f5761054f610a6e565b906000526020600020906006020160030160019054906101000a900460ff16156105b75760405162461bcd60e51b81526020600482015260156024820152741c1bdcdd08185b1c9958591e481d995c9a599a5959605a1b604482015260640160405180910390fd5b600081815260036020526040902054600a1015610648576001600082815481106105e3576105e3610a6e565b906000526020600020906006020160030160016101000a81548160ff0219169083151502179055507fb1c8a09f3f65c01ce2ad5471f151a4d0ca61d365bcd286c0f0041845538f2b098160016040516102229291909182521515602082015260400190565b50565b600080546040805160e081018252828152336020820190815291810186815285151560608301526080820185905260a0820185905260c0820185905260018401855584805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636006860290810191825593517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564850180546001600160a01b0319166001600160a01b039092169190911790559051939493919290917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565909101906107379082610b0d565b506060820151600382018054608085015115156101000261ff00199315159390931661ffff199091161791909117905560a0820151600482015560c0909101516005909101556000828152600160205260409081902080546001600160a01b0319163390811790915590517f4ea9a4c2644295403d8e347c48692cc92bf605a5fb4b31e88976a41e5b1199c2916107e39185906001600160a01b03929092168252602082015260400190565b60405180910390a150505050565b6040518060e001604052806000815260200160006001600160a01b031681526020016060815260200160001515815260200160001515815260200160008152602001600081525090565b60006020828403121561084d57600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561094b57898403603f19018652825180518552888101516001600160a01b0316898601528781015160e089870181905281519087018190528491905b808310156108db578183018c01518884016101000152918b01916108bc565b61010092508583828a01015260609150818401516108fc838a018215159052565b506080915081840151610912838a018215159052565b5060a0848101519089015260c093840151938801939093525096890196601f909101601f1916909401909301929187019160010161087c565b50919998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b8035801515811461098057600080fd5b919050565b6000806040838503121561099857600080fd5b823567ffffffffffffffff808211156109b057600080fd5b818501915085601f8301126109c457600080fd5b8135818111156109d6576109d661095a565b604051601f8201601f19908116603f011681019083821181831017156109fe576109fe61095a565b81604052828152886020848701011115610a1757600080fd5b826020860160208301376000602084830101528096505050505050610a3e60208401610970565b90509250929050565b600060018201610a6757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610a9857607f821691505b602082108103610ab857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b0857600081815260208120601f850160051c81016020861015610ae55750805b601f850160051c820191505b81811015610b0457828155600101610af1565b5050505b505050565b815167ffffffffffffffff811115610b2757610b2761095a565b610b3b81610b358454610a84565b84610abe565b602080601f831160018114610b705760008415610b585750858301515b600019600386901b1c1916600185901b178555610b04565b600085815260208120601f198616915b82811015610b9f57888601518255948401946001909101908401610b80565b5085821015610bbd5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212200195b88978d10dff262c3119c36eddd801ed8748b2c9c9d8eefad3eecd1a92e464736f6c63430008130033",
  deployedBytecode:
    "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637e9dffe61161005b5780637e9dffe6146100dd578063aee5c349146100fd578063bc7bf1c714610112578063d4ccd5f31461012557600080fd5b8063204ff2401461008257806363035f6614610097578063725009d3146100ca575b600080fd5b61009561009036600461083b565b610138565b005b6100b76100a536600461083b565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100956100d836600461083b565b61022d565b6100b76100eb36600461083b565b60026020526000908152604090205481565b610105610281565b6040516100c19190610854565b61009561012036600461083b565b61053c565b610095610133366004610985565b61064b565b600081815260036020526040812080549161015283610a47565b9091555050600081815260036020526040902054600a10156101f15760016000828154811061018357610183610a6e565b906000526020600020906006020160030160016101000a81548160ff0219169083151502179055507fb1c8a09f3f65c01ce2ad5471f151a4d0ca61d365bcd286c0f0041845538f2b098160016040516101e89291909182521515602082015260400190565b60405180910390a15b604080518281523360208201527fc6c773bb48fb8d38ada891d09df01af1f307f2a1bc38bb513c5cb1950150038191015b60405180910390a150565b600081815260026020526040812080549161024783610a47565b9091555050604080518281523360208201527fcf765d6f163c9b0d832e2a94f4c8e9bffd32a2c3ca5fdbb8cc67b5fe1441f4139101610222565b600080546060919067ffffffffffffffff8111156102a1576102a161095a565b6040519080825280602002602001820160405280156102da57816020015b6102c76107f1565b8152602001906001900390816102bf5790505b5090506000805b60005481101561048757600081815481106102fe576102fe610a6e565b6000918252602082206003600690920201015460ff1615159003610475576000818154811061032f5761032f610a6e565b90600052602060002090600602016040518060e0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201805461039190610a84565b80601f01602080910402602001604051908101604052809291908181526020018280546103bd90610a84565b801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b5050509183525050600382015460ff80821615156020840152610100909104161515604082015260048201546060820152600590910154608090910152835184908490811061045b5761045b610a6e565b6020026020010181905250818061047190610a47565b9250505b8061047f81610a47565b9150506102e1565b5060008167ffffffffffffffff8111156104a3576104a361095a565b6040519080825280602002602001820160405280156104dc57816020015b6104c96107f1565b8152602001906001900390816104c15790505b50905060005b82811015610534578381815181106104fc576104fc610a6e565b602002602001015182828151811061051657610516610a6e565b6020026020010181905250808061052c90610a47565b9150506104e2565b509392505050565b6000818154811061054f5761054f610a6e565b906000526020600020906006020160030160019054906101000a900460ff16156105b75760405162461bcd60e51b81526020600482015260156024820152741c1bdcdd08185b1c9958591e481d995c9a599a5959605a1b604482015260640160405180910390fd5b600081815260036020526040902054600a1015610648576001600082815481106105e3576105e3610a6e565b906000526020600020906006020160030160016101000a81548160ff0219169083151502179055507fb1c8a09f3f65c01ce2ad5471f151a4d0ca61d365bcd286c0f0041845538f2b098160016040516102229291909182521515602082015260400190565b50565b600080546040805160e081018252828152336020820190815291810186815285151560608301526080820185905260a0820185905260c0820185905260018401855584805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636006860290810191825593517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564850180546001600160a01b0319166001600160a01b039092169190911790559051939493919290917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565909101906107379082610b0d565b506060820151600382018054608085015115156101000261ff00199315159390931661ffff199091161791909117905560a0820151600482015560c0909101516005909101556000828152600160205260409081902080546001600160a01b0319163390811790915590517f4ea9a4c2644295403d8e347c48692cc92bf605a5fb4b31e88976a41e5b1199c2916107e39185906001600160a01b03929092168252602082015260400190565b60405180910390a150505050565b6040518060e001604052806000815260200160006001600160a01b031681526020016060815260200160001515815260200160001515815260200160008152602001600081525090565b60006020828403121561084d57600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561094b57898403603f19018652825180518552888101516001600160a01b0316898601528781015160e089870181905281519087018190528491905b808310156108db578183018c01518884016101000152918b01916108bc565b61010092508583828a01015260609150818401516108fc838a018215159052565b506080915081840151610912838a018215159052565b5060a0848101519089015260c093840151938801939093525096890196601f909101601f1916909401909301929187019160010161087c565b50919998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b8035801515811461098057600080fd5b919050565b6000806040838503121561099857600080fd5b823567ffffffffffffffff808211156109b057600080fd5b818501915085601f8301126109c457600080fd5b8135818111156109d6576109d661095a565b604051601f8201601f19908116603f011681019083821181831017156109fe576109fe61095a565b81604052828152886020848701011115610a1757600080fd5b826020860160208301376000602084830101528096505050505050610a3e60208401610970565b90509250929050565b600060018201610a6757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610a9857607f821691505b602082108103610ab857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b0857600081815260208120601f850160051c81016020861015610ae55750805b601f850160051c820191505b81811015610b0457828155600101610af1565b5050505b505050565b815167ffffffffffffffff811115610b2757610b2761095a565b610b3b81610b358454610a84565b84610abe565b602080601f831160018114610b705760008415610b585750858301515b600019600386901b1c1916600185901b178555610b04565b600085815260208120601f198616915b82811015610b9f57888601518255948401946001909101908401610b80565b5085821015610bbd5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212200195b88978d10dff262c3119c36eddd801ed8748b2c9c9d8eefad3eecd1a92e464736f6c63430008130033",
  linkReferences: {},
  deployedLinkReferences: {},
  networks: {
    "11155111": {
      address: "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      transactionHash:
        "0xacf07a44450ef0de7711db735184a59a0e7d3776ee5412b08072d4474f2bcba3",
    },
  },
};
const contractAddress = "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707";

// ------------------------------------------------------------------

const tokenABI = {
  _format: "hh-sol-artifact-1",
  contractName: "MyTokenContract",
  sourceName: "contracts/MyTokenContract.sol",
  abi: [
    {
      inputs: [],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "spender",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "allowance",
          type: "uint256",
        },
        {
          internalType: "uint256",
          name: "needed",
          type: "uint256",
        },
      ],
      name: "ERC20InsufficientAllowance",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "sender",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "balance",
          type: "uint256",
        },
        {
          internalType: "uint256",
          name: "needed",
          type: "uint256",
        },
      ],
      name: "ERC20InsufficientBalance",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "approver",
          type: "address",
        },
      ],
      name: "ERC20InvalidApprover",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "receiver",
          type: "address",
        },
      ],
      name: "ERC20InvalidReceiver",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "sender",
          type: "address",
        },
      ],
      name: "ERC20InvalidSender",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "spender",
          type: "address",
        },
      ],
      name: "ERC20InvalidSpender",
      type: "error",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "spender",
          type: "address",
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
      ],
      name: "Approval",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
      ],
      name: "Transfer",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          internalType: "address",
          name: "spender",
          type: "address",
        },
      ],
      name: "allowance",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "spender",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
      ],
      name: "approve",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "account",
          type: "address",
        },
      ],
      name: "balanceOf",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "decimals",
      outputs: [
        {
          internalType: "uint8",
          name: "",
          type: "uint8",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "name",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "symbol",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "totalSupply",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
      ],
      name: "transfer",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
      ],
      name: "transferFrom",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "nonpayable",
      type: "function",
    },
  ],
  bytecode:
    "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b81525081600390816200005f9190620002cd565b5060046200006e8282620002cd565b505050620000a83362000086620000ae60201b60201c565b6200009390600a620004ae565b620000a290620f4240620004c6565b620000b3565b620004f6565b601290565b6001600160a01b038216620000e35760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000f160008383620000f5565b5050565b6001600160a01b03831662000124578060026000828254620001189190620004e0565b90915550620001989050565b6001600160a01b03831660009081526020819052604090205481811015620001795760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000da565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620001b657600280548290039055620001d5565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200021b91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200025357607f821691505b6020821081036200027457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c857600081815260208120601f850160051c81016020861015620002a35750805b601f850160051c820191505b81811015620002c457828155600101620002af565b5050505b505050565b81516001600160401b03811115620002e957620002e962000228565b6200030181620002fa84546200023e565b846200027a565b602080601f831160018114620003395760008415620003205750858301515b600019600386901b1c1916600185901b178555620002c4565b600085815260208120601f198616915b828110156200036a5788860151825594840194600190910190840162000349565b5085821015620003895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003f0578160001904821115620003d457620003d462000399565b80851615620003e257918102915b93841c9390800290620003b4565b509250929050565b6000826200040957506001620004a8565b816200041857506000620004a8565b81600181146200043157600281146200043c576200045c565b6001915050620004a8565b60ff84111562000450576200045062000399565b50506001821b620004a8565b5060208310610133831016604e8410600b841016171562000481575081810a620004a8565b6200048d8383620003af565b8060001904821115620004a457620004a462000399565b0290505b92915050565b6000620004bf60ff841683620003f8565b9392505050565b8082028115828204841417620004a857620004a862000399565b80820180821115620004a857620004a862000399565b61072080620005066000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056a565b60405180910390f35b6100c96100c43660046105d4565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f93660046105fe565b610236565b604051601281526020016100ad565b6100dd61011b36600461063a565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d4565b610269565b6100dd61015f36600461065c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101999061068f565b80601f01602080910402602001604051908101604052809291908181526020018280546101c59061068f565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030c565b506001949350505050565b6060600480546101999061068f565b60003361022a81858561030c565b610284838383600161036b565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461030657818110156102f757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103068484848403600061036b565b50505050565b6001600160a01b03831661033657604051634b637e8f60e11b8152600060048201526024016102ee565b6001600160a01b0382166103605760405163ec442f0560e01b8152600060048201526024016102ee565b610284838383610440565b6001600160a01b0384166103955760405163e602df0560e01b8152600060048201526024016102ee565b6001600160a01b0383166103bf57604051634a1406b160e11b8152600060048201526024016102ee565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043291815260200190565b60405180910390a350505050565b6001600160a01b03831661046b57806002600082825461046091906106c9565b909155506104dd9050565b6001600160a01b038316600090815260208190526040902054818110156104be5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ee565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104f957600280548290039055610518565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055d91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105975785810183015185820160400152820161057b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105cf57600080fd5b919050565b600080604083850312156105e757600080fd5b6105f0836105b8565b946020939093013593505050565b60008060006060848603121561061357600080fd5b61061c846105b8565b925061062a602085016105b8565b9150604084013590509250925092565b60006020828403121561064c57600080fd5b610655826105b8565b9392505050565b6000806040838503121561066f57600080fd5b610678836105b8565b9150610686602084016105b8565b90509250929050565b600181811c908216806106a357607f821691505b6020821081036106c357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220177c1672099f569d7b3748094038a2f5d87001cef179e3af083c4a01cbf3884564736f6c63430008140033",
  deployedBytecode:
    "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056a565b60405180910390f35b6100c96100c43660046105d4565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f93660046105fe565b610236565b604051601281526020016100ad565b6100dd61011b36600461063a565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d4565b610269565b6100dd61015f36600461065c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101999061068f565b80601f01602080910402602001604051908101604052809291908181526020018280546101c59061068f565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030c565b506001949350505050565b6060600480546101999061068f565b60003361022a81858561030c565b610284838383600161036b565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461030657818110156102f757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103068484848403600061036b565b50505050565b6001600160a01b03831661033657604051634b637e8f60e11b8152600060048201526024016102ee565b6001600160a01b0382166103605760405163ec442f0560e01b8152600060048201526024016102ee565b610284838383610440565b6001600160a01b0384166103955760405163e602df0560e01b8152600060048201526024016102ee565b6001600160a01b0383166103bf57604051634a1406b160e11b8152600060048201526024016102ee565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043291815260200190565b60405180910390a350505050565b6001600160a01b03831661046b57806002600082825461046091906106c9565b909155506104dd9050565b6001600160a01b038316600090815260208190526040902054818110156104be5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ee565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104f957600280548290039055610518565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055d91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105975785810183015185820160400152820161057b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105cf57600080fd5b919050565b600080604083850312156105e757600080fd5b6105f0836105b8565b946020939093013593505050565b60008060006060848603121561061357600080fd5b61061c846105b8565b925061062a602085016105b8565b9150604084013590509250925092565b60006020828403121561064c57600080fd5b610655826105b8565b9392505050565b6000806040838503121561066f57600080fd5b610678836105b8565b9150610686602084016105b8565b90509250929050565b600181811c908216806106a357607f821691505b6020821081036106c357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea2646970667358221220177c1672099f569d7b3748094038a2f5d87001cef179e3af083c4a01cbf3884564736f6c63430008140033",
  linkReferences: {},
  deployedLinkReferences: {},
  networks: {
    // replace the address and the hash
    "11155111": {
      address: "0xacf07a44450ef0de7711db735184a59a0e7d3776ee5412b08072d4474f2bcba3",
      transactionHash:
        "0xacf07a44450ef0de7711db735184a59a0e7d3776ee5412b08072d4474f2bcba3",
    },
  },
};
const tokenAddress = "0xacf07a44450ef0de7711db735184a59a0e7d3776ee5412b08072d4474f2bcba3";

const ContractDataFetcher: React.FC = () => {
  const [data, setData] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    // Fetch data from contract
    const fetchData = async () => {
      try {
        // Initialize ethers provider
        const provider = new ethers.providers.JsonRpcProvider(
          "http://127.0.0.1:8545/"
        );
        const abiArray = contractABI.abi;

        // Create a contract instance
        const contract = new ethers.Contract(
          contractAddress,
          abiArray,
          provider
        );

        try {
          const result = await contract.getAllposts();
          setData(result);
        } catch (error) {
          console.error(error);
        }
      } catch (error) {
        console.error("Failed to fetch contract data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleverify = async (postId: string) => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(tokenAddress, tokenABI.abi, signer);

      const tx = await contract.validatepost(postId);
      console.log("validated");
    } catch (error) {
      console.log(error);
    }
  };

  const postids: string[] = [];
  const addresses: string[] = [];
  const postsarr: { content: string; isVerified: boolean; postId: string }[] =
    [];

  if (data) {
    data.forEach((item: any) => {
      addresses.push(item[1]);
      postsarr.push({ content: item[2], isVerified: item[3], postId: item[0] });
    });
  }

  if (loading) return <p>Loading...</p>;
  if (!data) return <p>No data found</p>;

  return (
    <>
      <div id="re">
        {postsarr.map((post, index) => (
          <Card key={index} className="mb-4">
            <CardTitle className="p-5 pb-1">
              <div className="flex justify-between items-center">
                Post Title
                {post.isVerified && <Badge>Verified</Badge>}
                {!post.isVerified && <Badge>Not Verified</Badge>}
              </div>
              <div className="p-2"></div>
              <hr className="ml-[-1.3rem] mr-[-1.3rem]"></hr>
            </CardTitle>
            <CardDescription className="p-5">
              {post.content}
              <div className="p-1"></div>
            </CardDescription>
            <hr></hr>
            <div className="p-2.5"></div>
            <CardFooter>
              <Button>Approve</Button>
              <div className="p-1"></div>
              <Button onClick={() => handleverify(post.postId)}>Verify</Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </>
  );
};

export default ContractDataFetcher;
